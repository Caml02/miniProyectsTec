{"version":3,"file":"paintCursor.js","names":["document","addEventListener","canvas","querySelector","context","getContext","colorPicker","getElementById","brushSize","captureBtn","clearBtn","isDrawing","lastX","lastY","stopDrawing","e","offsetX","offsetY","size","parseInt","value","color","lineWidth","strokeStyle","lineCap","x","y","beginPath","moveTo","lineTo","stroke","image","toDataURL","link","createElement","href","download","click","clearRect","width","height"],"sources":["paintCursor.js"],"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,WAC1C,MAAMC,EAASF,SAASG,cAAc,wBAChCC,EAAUF,EAAOG,WAAW,MAC5BC,EAAcN,SAASO,eAAe,gBACtCC,EAAYR,SAASO,eAAe,cACpCE,EAAaT,SAASO,eAAe,eACrCG,EAAWV,SAASO,eAAe,aAEzC,IAAII,GAAY,EACZC,EAAQ,EACRC,EAAQ,EAmCZ,SAASC,IACPH,GAAY,CACd,CAnCAT,EAAOD,iBAAiB,aAQxB,SAAsBc,GACpBJ,GAAY,GACXC,EAAOC,GAAS,CAACE,EAAEC,QAASD,EAAEE,QACjC,IAVAf,EAAOD,iBAAiB,aAYxB,SAAcc,GACZ,IAAKJ,EAAW,OAEhB,MAAMO,EAAOC,SAASX,EAAUY,OAC1BC,EAAQf,EAAYc,MAC1BhB,EAAQkB,UAAYJ,EACpBd,EAAQmB,YAAcF,EACtBjB,EAAQoB,QAAU,QAElB,MAAMC,EAAIV,EAAEC,QACNU,EAAIX,EAAEE,QAEZb,EAAQuB,YACRvB,EAAQwB,OAAOhB,EAAOC,GACtBT,EAAQyB,OAAOJ,EAAGC,GAClBtB,EAAQ0B,UAEPlB,EAAOC,GAAS,CAACY,EAAGC,EACvB,IA7BAxB,EAAOD,iBAAiB,UAAWa,GACnCZ,EAAOD,iBAAiB,WAAYa,GAEpCL,EAAWR,iBAAiB,SAgC5B,WACE,MAAM8B,EAAQ7B,EAAO8B,YACfC,EAAOjC,SAASkC,cAAc,KACpCD,EAAKE,KAAOJ,EACZE,EAAKG,SAAW,cAChBH,EAAKI,OACP,IArCA3B,EAAST,iBAAiB,SAuC1B,WACEG,EAAQkC,UAAU,EAAG,EAAGpC,EAAOqC,MAAOrC,EAAOsC,OAC/C,GACF","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    const canvas = document.querySelector('#canvasCursor canvas');\r\n    const context = canvas.getContext('2d');\r\n    const colorPicker = document.getElementById('color-picker');\r\n    const brushSize = document.getElementById('brush-size');\r\n    const captureBtn = document.getElementById('capture-btn');\r\n    const clearBtn = document.getElementById('clear-btn');\r\n  \r\n    let isDrawing = false;\r\n    let lastX = 0;\r\n    let lastY = 0;\r\n  \r\n    canvas.addEventListener('mousedown', startDrawing);\r\n    canvas.addEventListener('mousemove', draw);\r\n    canvas.addEventListener('mouseup', stopDrawing);\r\n    canvas.addEventListener('mouseout', stopDrawing);\r\n  \r\n    captureBtn.addEventListener('click', captureCanvas);\r\n    clearBtn.addEventListener('click', clearCanvas);\r\n  \r\n    function startDrawing(e) {\r\n      isDrawing = true;\r\n      [lastX, lastY] = [e.offsetX, e.offsetY];\r\n    }\r\n  \r\n    function draw(e) {\r\n      if (!isDrawing) return;\r\n  \r\n      const size = parseInt(brushSize.value);\r\n      const color = colorPicker.value;\r\n      context.lineWidth = size;\r\n      context.strokeStyle = color;\r\n      context.lineCap = 'round';\r\n  \r\n      const x = e.offsetX;\r\n      const y = e.offsetY;\r\n  \r\n      context.beginPath();\r\n      context.moveTo(lastX, lastY);\r\n      context.lineTo(x, y);\r\n      context.stroke();\r\n  \r\n      [lastX, lastY] = [x, y];\r\n    }\r\n  \r\n    function stopDrawing() {\r\n      isDrawing = false;\r\n    }\r\n  \r\n    function captureCanvas() {\r\n      const image = canvas.toDataURL();\r\n      const link = document.createElement('a');\r\n      link.href = image;\r\n      link.download = 'captura.png';\r\n      link.click();\r\n    }\r\n  \r\n    function clearCanvas() {\r\n      context.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n  });\r\n  "]}